Programacion Funcional:
Curry y Uncurry: las funciones pueden devolver datos primitivos o hacer evaluacion parcial y devolver otras funciones
Curry:: ((a,b) -> c) -> (a -> (b -> c))
Curry f a b = f (a,b)
si bien es media anti intuitiva, f a b necesita de dos datos para ser procesada, f (a,b) solo necesita uno (la tupla)
Uncurry:: (a -> b -> c) -> ((a,b) -> c)
Uncurry f (a,b) = f a b
Notacion Lambda: para definir funciones anonimas, \ -> (no hace falta tiparla, pero hay que cuidar que sea correcta)
Composicion de Funciones: (.):: (a -> b) -> (c -> a) -> c -> b 
Map:: (a -> b) -> [a] -> [b] toma una funcion y se la aplica a una lista y te devuelve lista de aplicar esa funcion a todos los elementos de la lista.
Filter:: (a -> Bool) -> [a] -> [a]
Filter p (x:xs) = if p x then x : filter p xs else filter p xs
----------RECURSION ----------
Recursion estructural: el caso base devuelve un valor fijo Z, el caso recursivo usa una funcion sobre la cabeza de la lista y no usa el tail mas que para el llamado
recursivo
Foldr:: (a -> b -> b) -> b -> [a] -> b
foldr f z [] = []
foldr f z x:xs = f x (foldr f z xs) 
Recursion primitiva: caso base devuelve valor fijo Z, caso recursivo puede referenciar a la cola de la lista ademas de en el llamado recursivo.
Recr:: (a -> [a] -> b ->  b) -> b -> [a] -> b
Recursion iterativa:: toma un acumulador y va actualizando su valor hasta llegar al caso base y lo devuelve actualizado.
foldl::(b -> a -> b) -> b -> [a] -> b
foldl _ ac [] = ac
foldl f ac x:xs = foldl f (f ac x ) xs
--------------------RAZONAMIENTO ECUACIONAL E INDUCCION ESTRUCTURAL-----------------------------------------------------
No hay tanto para decir de esto, no asumir nada, usar lemas y tener claro cuales y cuantos son los casos base e inductivos respectivamente.
La extensionalidad ayuda a separar en casos, listas es la vacia y la que tiene un head, booleanos True o False, Nat es Zero o Succ(Nat),... todo lo que sea una
propiedad debe enunciarse como P(q) con para todo Q, se pueden no escribir siempre pero aclarar que estan considerados los cuantificadores. La extensionalidad
funcional dice que dos funciones son iguales si para todo x::a, f,g:: a-> b, f x= g x
--------------------INTERPRETES-------------------------------------------------------------------------------
se definen distintos tipos de datos y hay que ver como hacer para que evaluar programas nos deje obtener distintos tipos de resultados como Nat, Booleanos, Expresiones etc.. 
usa mucho los cases of o va haciendo pattern matching con los tipos de datos. No vimos practica de esto asi que leer la teorica y chau.
----------------SISTEMAS DEDUCTIVOS Y DEDUCCION NATURAL-----------------------------------------------------------
Notacion: la implicacion asocia a derecha, las (∧, ∨) no son asociativos ni conmutativos. Eliminar el bottom seguido de la eliminacion de la negacion no ayuda casi nunca
Los principios clasicos solo cuando te dan permiso si no no. Fijarse que hay en el contexto que sirva para probar. A veces la eliminacion del O puede servir.
-----------------CALCULO LAMBDA------------------------------------------------------------------------------------
La sintaxis de los tipos: bool o τ → σ, el constructor de tipos → es asociativo a derecha.
Los terminos pueden ser: variables, abstracciones,aplicaciones,true,false,if M then N else P. Las aplicaciones asocian a izquierda y tienen mayor precedencia que la abstraccion
y el if.
Una expresion esta en forma normal si no puede reducir mas.
Reglas de Tipado: consiste en, cuando se pide un juicio de tipado, poder dar los tipos que tienen los terminos en una expresion. Mirar las tablitas y dar las reglas de tipado solo de lo que piden
o es nuevo en el lambda extendido. Cuidar la unicidad de tipos
Semantica operacional: dice como se ejecuta un programa hasta llegar a un resultado.
Semantica small-step: ejecucion paso a paso. Un programa es un termino M tipable y cerrado(sin variables libres)
Juicios de evaluacion: M → N  donde M y N son programas
Hay que definir el conjunto de valores que seran posibles resultado de evaluar programas (true/false/abstraccion...)
Reglas de Congruencia: si M -> N, entonces tiene que no perder determinismo (no puede reducir por mas de una regla) ni prorgeso
(o bien M es un valor o bien existe N tal que M → N). si tengo por ej MP -> NP, y si la otra es VM -> VN no pueden 
algunos no ser valores
Reglas de computo: indican que termino o valor tiene como resultado una expresion si se hace una cierta operacion o se cumple
cierta precondicion en un if cosas asi.Si queremos que algo falle no le escribimos regla o explicitamos el fallo.
Cuando se trabaja con valores hay que hacer y aclarar la sustitucion en el termino que obtendremos de respuesta.
---------------------Correspondecia Curry-Howard------------------------------------------------
Basicamente consiste en que se puede traducir las reglas de tipado a reglas de DN, se sacan los terminos y se dejan los tipos
el constructor de tipos σ → τ se puede leer como una implicacion σ ⇒ τ.Una formula puede tener mas de una prueba,
Corte(cut): es una afirmacion intermedio(lema) aunque no sea una subformula de la afirmacion final (metes un galerazo para
probar lo que tenes ganas basicamente) y queda de tarea demostrar el lema.Suele ser una introduccion del implica seguido
de una eliminacion del implica.Para eliminar el corte reemplazamos el termino que introdujimos y lo reemplazamos por su prueba
Conjuncion: es medio lo mismo, introducis las reglas de tipado dejas los tipos y pasas a DN. Los cortes son el elemento del par
que no estaba como afirmacion final.
Seguia pero me dio paja.
-------------------------INFERENCIA DE TIPOS-------------------------------------
Los terminos ahora no tienen tipos, hay que hacer el arbol de inferencia y ver si las variables ya existian en el contexto
o darles variables de tipo frescas. Seguir los pasos que te diga para el tipo de dato y sobre todo hacer el mgu y cuidar de
ver si falla o no, para ello podemos reducir el mgu con los siguientes pasos o nos indica si falla:
Delete-eliminacion trivial
Decompose (sobre todo funciones o cosas iguales a ambos lados y se quiere ver termino a termino)
Swap: te permite dar vuelta la unificacion, util sobre todo si vas a hacer una eliminacion y tenes las cosas al reves de lo que necesitas
Elim: siempre y cuando no rompa otras cosas, la eliminacion es como una sustitucion, "donde estaba este Xn ahora va este tipo 
ya que unificaron".
Clash: si no dan la cantidad exacta de terminos, si aparecen cosas tipo Nat ?= Bool, F(x1....) ?= G(...) los constructores
son distintos(las funciones) asi que no unificara.
Occur-Check: si Xn ?= t falla si Xn =/ t y Xn ocurre en t (basicamente X1 ?= X1 -> X2)
Algoritmo de unificacion Martelli-Montanari: dado un conjunto de ecuaciones a unificar E, mientras E no sea vacio aplicar alguna
de las 6 reglas de arriba para reducir a E' que sea mas chica hasta llegar al conj vacio, caso contrario deberia fallar pero no deberia haber una
cadena infinita de pasos de reduccion.
Algoritmo W: recibe un termino sin tipar, puede fallar o devolver una tripla (Γ, M, τ ) donde W(u) si tiene exito devuelve
W(U) ⇝ Γ ⊢ M : τ.
Cuando se hace el arbol se usa el algo W, cuidar que sea lo que se nos pide estrictamente y no repetir variables frescas, 
arrancar desde abajo y subir. Si medio a ojo se ve que puede fallar probar primero esa rama.
-------------------LOGICA DE PRIMER ORDEN-----------------------------------------------------------------------------------
La idea es armar todo en clausulas, se logra satisfacer las formulas o se refuta (se puede colgar pero etc). A la logica prop
se le agregan cuantificadores existe/para todo X.
Unas estructura de primer orden es un par M(M,I) donde M es un conj no vacio, I una funcion que da interpretacion a cada simbolo
Para cada sımbolo de funcion f de aridad n:I(f) : M(elevado)n → M
Para cada sımbolo de predicado P de aridad n: I(P) ⊆ M(elvado)n
Logicamente se agregan nuevas reglas para la DN con cuantificadores.
Sea a una asignacion a:X -> M, una fomrula es:
Valida: si a valua M para todo M,a 
Satisfacible: si a valua m para al menos un M,a
Invalida: si a no valua M para algun M,a
Insatisfacible: si a no valua M para ningun M,a
La unificacion es igual salvo con pequeños ajustes para los cuantificadores en el Elim. 
++++++++++++PROLOG++++++++++++++++++++++++++
Prolog opera con reglas, donde las que son de aridad 0 se llaman hechos.Las reglas estan cuantificadas por para todos, y 
las consultas por existensiales. Busca probar la formula τ refutando ¬τ-
Resolucion para logica proposicional: 
Se toma C el conjunto de clausulas, para pasar una formula a conj de clausulas hay 3 pasos en orden:
1 implica como negacion del antecedente O consecuente
2 empujar el/los ¬ hacia adentro
lo que tenemos hasta aca se llama fornma normal negada
3 Distribuir ∨ sobre ∧
Formulas en CNF σcnf ::= (κ1 ∧ κ2 ∧ . . . ∧ κn)
Clausulas κ ::= (ℓ1 ∨ ℓ2 ∨ . . . ∨ ℓm)
Literales ℓ ::= P | ¬P
Luego, se hace la resolvente buscando llegar a la clausula vacia lo cual determina ¬t valua insat por lo tanto t es valida
El metodo de resolucion devuelve insat solo si C0 llega a clausula vacia y termina(a lo sumo hay 2 elev n). 
Resolucion para logica de primer order: la dif con el anterior es que este puede colgarse si la formula es invalida, si es valida
seguro termina.
Los primeros dos pasos son iguales, luego :
3) es sacar los cuantificadores para todo/ existenciales hacia fuera
Lo que tenemos hasta aca se conoce como forma normal prenexa
4) Skolemnizar: sacamos los existenciales por testigos. Si el literal solo toma a la variable cuantificada se introduce un
testigo para reemplazarlo; si el literal dependiera de otras variables libres(del literal) sera entonces una funcion que tome
como parametros las demas variables que quedaron. Por esto es mejor skolemnizar desde afuera hacia adentro para evitar tener 
funciones de aridad muy grande
LA SKOLEMNIZACION PRESERVA SATISFACIBILIDAD; NO VALIDEZ
5) Distribuir ∨ sobre ∧
6) Empujar los cuantificadores hacia adentro y distribuirlos sobre los ∧
RECORDAR QUE LAS VARIABLES POR MAS NOMBRE IGUAL SIEMPRE  SON DISTINTAS ENTRE CLAUSULAS, constantes pueden ser la misma
Para que la refutacion sea valida hay que hacer el mgu entre terminos. Al hacer el MGU SIEMPRE se sustituyen variables, no vale
sustituir constantes por variables, ni funciones por constantes etc etc, solo sacar variables al estilo X1 := const, otra var, predicados,etc
la resolucion binaria (la que se usaba hasta aca) no es completa pues solo nos deja comparar de a un literal, esto
puede llevar a que si bien una formula es valida nunca lo podamos demostrar ya que nunca terminaria de unificar etc
Dado un conj de clausulas C0, el pasaje a forma clausal termina Y el algo retorna insat solo si C0 valua bottom, caso
contrario puede no terminar.
++++++++++++++++++++++++++RESOLUCION SLD+++++++++++++++++++++++++++++++++++++++++++++++++
Para que una resolucion sea SLD tiene que ser: todas clausulas de Horn, siempre usa una clausula objetivo, 
ser lineal(usar siempre el resultado de la resolucion anterior y que esta sea goal), seleccion binaria(elijo al que tenga
el literal pos y neg en cada clausula). Para justificar que una resolucion fue SLD decir que partes cumplen con la def, no
decir la definicion y ya.
Clausulas de Horn: uno o menos literales postivos, nunca mas.
Clausulas Goal: no tiene literales positivos
Clausulas definicion tienen 1 literal positivo. Hay clausulas que no pueden ser escritas como clausulas de Horn
Las derivaciones SLD es tomar el conj de clausulas Goal y definicion e ir haciendo el arbolito de como llega a INSAT
La resolucion SLD es completa, si la formula es insat entonces existe una refutacion SLD.
Semantica de Prolog:un programa en Prolog es una lsita de clausulas definicion, mientras que una consulta es una clausula Goal
El orden de los literales el la clausula Goal(o consulta) es importante ya que se elige el primer literal para resolucion.
Prolog busca las refutaciones con DFS, usando las reglas a medida que aparecen.La busqueda DFS es incompleta ya que Prolog 
busca todos los resultados no importa si ya encontro/demostro una vez, lo que puede hacer que se cuelgue(pensar en suc(Zero))
PROLOG NO CONTEMPLA DIRECTAMENTE OCCURS CHECK. BFS es completa pero mas costosa, prolog usa DFS
Reversibilidad: prolog permite chequear la reversibilidad cuando esta tipado con ?, la reversibilidad tambien da pie a la
generacion infinita (si pido los suc de zero, o listas con el desde)
Cut: tiene exito siempre, al momento de hacer backtracking se vuelve hasta el paso que hizo aparecer el cut y se descartan las
opciones alternativas, si se puede se vuelve para atraz y continua el backtracking sin explorar esa rama. Hay cuts que no alteran
la semantica(ejemplo suma) y otros que dañan el resultado (ejemplo maximo entre dos num viendo solo la cond y no res).
En el grafico si bien sabemos da exito inmediato sigue graficando lo que viene en la misma consulta del cut (quizas por unificar)
pero no hace el backtracking sobre que pasaba si no entraba esa regla (? A,!,B,C reduce a ? !,B,C esta reduce a ? B,C...)
hasta terminar (si termina) luego pasa directo a lo que estaba antes de A,!,B,C y no backtrackea a que hubiera pasado 
si no entraba A etc.
El fail falla siempre, permite hacer la negacion por falla (que no es igual a negacion logica).
La negacion por falla se demuestra dando false a cosas (por ej not(fruta(papa))) mientras que la negacion logica nos permite
mas declaratividad (not (fruta(papa)),verdura(papa))
-----------------------------------POO-------------------------------------------------------------------
En POO hay OBJETOS que se comunican entre si con MENSAJES (es eso basicamente, despues estan los bloque y clases etc).
La interfaz es el cjto de mensajes que un objeto sabe responder, y los metodos son los procedimientos como tal.
Encapsulamiento: solo se puede interactuar con un objeto a travez de la interfaz, el estado interno del objeto es inaccesible
desde el exterior.Consecuencias: alternar entre dos representaciones de una misma entidad no altera el comportamiento visible
(basicamente no importa su  implementacion si no que responda como se espera) es en si ocultar el como esta hecho. Duck-typing:
un objeto se puede intercambiar por otro siempre que implemente la misma interfaz.
Todos los objetos son instancia de alguan clase: una clase es un objeto que abstrae el comportamiento que tienen en comun 
todas sus instancias, todas las instancias de una clase tienen los mismos atributos y usan el mismo metodo para responder a
un mensaje especifico.
Las subclases heredan los metodos de sus superclases y pueden optar por reemplazar un metodo si quisieran por uno mas esp.
Clases abstractas: no se van a instanciar, estan para abstraer los metodos que van a usar sus subclases unicamente. Ej clase Numbre
Precedencia de mensajes: unarios > binarios > keywords (:). Si hay una cadena de mensajes de misma precedencia (1+2*3) smalltalk
no sabe de precedencia matematica entonces va a hacer (1 +2) * 3, cuidar eso.
Las variables locales van entre ||, los mensajes se encadenan con (;), hay seis palabras reservadas: nil, true, false,
self, super, thisContext. Caracteres: $, simbolos: #, strings: 'texto'.
Los bloques ejecutan comandos, pueden tener o no parametros. Si tienen parametros se los escribe :X1 ... Xn, luego para evaluar
un bloque sin parametros solamente se escribe value, si tiene parametros value : arg1 value: arg2 ... value: argn donde los n 
seran los valores pasados por parametro.
Super indica que, desde self, se debe buscar el mensaje M a partir de su superclase (incluso si self lo tiene def).
Method dispatch: O: objeto al que se le envia msj, S: selector del mensaje que se desea enviar, C: clase en la que se desea 
buscar el metodo. Procedimiento: si C define un metodo M para S, devolver M; si no sea C' la superclase de C: si C' es nil
devolver notUnderstood, caso contrario C:= C' y volver a paso 1.
